["Trees",{"p":"Trees are well known as a non-linear Data Structure,it organizes the data in a hierarchical way."},{"p":"Terminology Summary\nRoot: the topmost node of the tree\nEdge: the link between 2 nodes\nChild: a node that has a parent node\nParent: a node that has an edge to a child node\nLeaf: a node that does not have a child node in the tree\nHeight: The height of a tree is the length of the longest path to a leaf.\nDepth: The depth of a node is the length of the path to its root."},{"p":"Why Trees?\n1. One reason to use trees might be because you want to store information that naturally forms a hierarchy. For example, the file system on a computer:\n\n2. Trees (with some ordering e.g., BST) provide moderate access/search (quicker than Linked List and slower than arrays).\n3. Trees provide moderate insertion/deletion (quicker than Arrays and slower than Unordered Linked Lists).\n4. Like Linked Lists and unlike Arrays, Trees don’t have an upper limit on number of nodes as nodes are linked using pointers."},{"p":"Main applications of trees include:\n1. Manipulate hierarchical data.\n2. Make information easy to search (see tree traversal).\n3. Manipulate sorted lists of data.\n4. As a workflow for compositing digital images for visual effects.\n5. Router algorithms\n6. Form of a multi-stage decision-making (see business chess)."},{"img":"https://cdn-images-1.medium.com/max/750/1*3WN7tIQ-kNBQmY9MgvTuOA.jpeg"},{"img":"https://cdn-images-1.medium.com/max/750/1*9AtR3bhhlMJxQlaUVEQgrw.jpeg"},{"img":"https://cdn-images-1.medium.com/max/750/1*j5qKwIxKcEjoxy88EOc1Rg.jpeg"},{"video":"<iframe width=\"1045\" height=\"444\" src=\"https://www.youtube.com/embed/qH6yxkw0u78?list=PL-pUjcDnciX3Z5AEE8HHRrcfj-987Ia94\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"}]